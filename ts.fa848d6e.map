{"version":3,"sources":["src\\ts\\helpers.ts","src\\ts\\index.ts"],"names":[],"mappings":"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","file":"ts.fa848d6e.map","sourceRoot":"..","sourcesContent":["const createElementWithClass = (elementType: string, className: string) => {\r\n    const element = document.createElement(elementType)\r\n    element.classList.add(className)\r\n    return element\r\n}\r\n\r\nconst createElementWithManyClass = (elementType: string, classNames: string[]) => {\r\n    const element = document.createElement(elementType)\r\n    classNames.forEach(classe => {\r\n        element.classList.add(classe)\r\n    })\r\n    return element\r\n}\r\n\r\nconst addElemntsToContainer = <T>(container: any, elements: T[]) => {\r\n    elements.forEach(element => {\r\n        container.appendChild(element)\r\n    })\r\n}\r\n\r\nconst setAttr = (element: HTMLElement, attributes: Record<string, any>, attrContent?: string) => {\r\n    Object.keys(attributes).forEach(attribut => {\r\n      element.setAttribute(attribut, attributes[attribut])\r\n    })\r\n    if(attrContent) element.innerHTML = attrContent\r\n  } \r\n\r\nconst setLoader = () => {\r\n    \r\n   const loader = createElementWithClass('div', 'loader')\r\n   const spanElA = document.createElement('span')\r\n   const spanElB = document.createElement('span')\r\n   const spanElC = document.createElement('span')\r\n   addElemntsToContainer(loader, [spanElA,spanElB,spanElC])\r\n   return loader\r\n}\r\n\r\nconst removeLoader = (container: HTMLElement, elementToAdd: HTMLElement, message: string, time: number) => {\r\n    setTimeout(()=> {\r\n        container.removeChild(elementToAdd)\r\n        container.innerHTML = message\r\n      }, time)\r\n}\r\n\r\nexport { createElementWithClass, createElementWithManyClass, addElemntsToContainer, setAttr, setLoader, removeLoader }","\r\nimport { createElementWithClass, createElementWithManyClass, addElemntsToContainer, setAttr, setLoader, removeLoader } from './helpers'\r\nconst body = document.querySelector<HTMLBodyElement>('.body')!\r\n\r\n// sendMessage\r\nconst createMessageElement = (messType: 'bot' | 'user') => createElementWithManyClass('div', [`chat__${messType}`, 'chat__message'])\r\n\r\n\r\nclass Chatbot {\r\n  input: any\r\n  submitInput: HTMLElement\r\n  chatBtn: HTMLElement\r\n  chatContainer: HTMLElement\r\n  chatQuesBtn: any\r\n  chatQues: HTMLElement\r\n  root: HTMLElement\r\n  chatWindow: HTMLElement\r\n  quesOptions: string[]\r\n  quesReply: string[]\r\n  loader: HTMLElement\r\n\r\n\r\n  constructor(root: HTMLElement = document.body) {\r\n    this.root = root\r\n    this.input = createElementWithClass('input', 'chat__input--field')\r\n    this.submitInput = createElementWithClass('button', 'chat__input--submit')\r\n    this.chatBtn = createElementWithClass('button', 'chat__btn')\r\n    this.loader = setLoader()\r\n    this.chatContainer = createElementWithManyClass('div', ['chat__container', 'active'])\r\n    this.chatQues = createElementWithClass('div', 'chat__ques')\r\n    this.chatWindow = createElementWithClass('div', 'chat__window')\r\n    this.quesOptions = ['Payment declined', 'Payment info', 'Unknown charge', 'Promotions and Deals']\r\n    this.quesReply = ['I am very sorry your card has been declined', 'Your last paymant was $3.000', 'I will transfer you to... ', 'Are special deals for you...  ']\r\n  }\r\n\r\n  init() {\r\n    const welcome = createMessageElement('bot')\r\n    welcome.innerHTML = 'Welcome! Ask me a question so I can help you or chose one of the options:'\r\n    this.chatWindow.appendChild(welcome)\r\n    this.createLayout()\r\n    this.chatEventsHandler()\r\n    this.botQueHandler()\r\n  }\r\n\r\n  setQues(options: string[], replyes: string[]) {\r\n    this.quesOptions = options;\r\n    this.quesReply = replyes;\r\n  }\r\n\r\n  createLayout() {\r\n    // creating elements\r\n    const chatDiv = createElementWithClass('div', 'chat')\r\n    const chatInput = createElementWithClass('form', 'chat__input')\r\n    const chatHeader = createElementWithClass('div', 'chat__header')\r\n    // const chatImg = createElementWithClass('img', 'header__img') \r\n\r\n  \r\n    chatHeader.innerHTML = \"Chat Assistant\"\r\n         \r\n\r\n\r\n    this.chatBtn.innerHTML = 'Chat'\r\n\r\n    setAttr(this.input, { type: 'text', placeholder: 'Ask me question...?' })\r\n    setAttr(this.submitInput, { type: 'submit' }, 'âœ”')\r\n\r\n    //appending element\r\n    this.root.appendChild(chatDiv)\r\n    // chatHeader.appendChild(chatImg)\r\n    addElemntsToContainer(chatDiv, [this.chatBtn, this.chatContainer])\r\n    addElemntsToContainer(this.chatContainer, [chatHeader, this.chatWindow, chatInput])\r\n    addElemntsToContainer(chatInput, [this.input, this.submitInput])\r\n    this.chatWindow.appendChild(this.chatQues)\r\n    \r\n  }\r\n\r\n  botAnswers(question: string) {\r\n    const findAnswer = this.quesOptions.indexOf(question)\r\n    const botMessage = findAnswer === -1 ? 'I\\'m sorry. Chose one of the folowing options: ' : this.quesReply[findAnswer];\r\n    const chatBotMessage = createMessageElement('bot')\r\n\r\n\r\n\r\n    chatBotMessage.appendChild(this.loader)\r\n    this.chatWindow.appendChild(chatBotMessage)\r\n\r\n    removeLoader(chatBotMessage, this.loader, botMessage, 3000)\r\n\r\n    this.resetHeight()\r\n  }\r\n\r\n  botQueHandler() {\r\n    this.quesOptions.forEach((option, i) => {\r\n      const chatQuesBtn = createElementWithClass('button', 'chat__ques-btn')\r\n      chatQuesBtn.innerHTML = option\r\n      \r\n      chatQuesBtn.setAttribute('id', `${i}`)\r\n      chatQuesBtn.addEventListener('click', (e) => this.predominateOptionsHandler(e));\r\n      this.chatQues.appendChild(chatQuesBtn)\r\n    })\r\n  }\r\n\r\n  resetHeight() {\r\n    this.chatWindow.removeChild(this.chatQues)\r\n    setTimeout(() => {\r\n      this.chatWindow.appendChild(this.chatQues)\r\n      this.chatWindow.scrollTo(0, this.chatWindow.scrollHeight)\r\n    }, 4000)\r\n  }\r\n\r\n  predominateOptionsHandler(e: any) {\r\n    const chatBotMessage = createMessageElement('bot')\r\n    const chatUserMessage = createMessageElement('user')\r\n    const targetId = +e.target.id\r\n\r\n    chatUserMessage.innerHTML = e.target.innerHTML\r\n\r\n    chatBotMessage.appendChild(this.loader)\r\n    this.chatWindow.append(chatUserMessage, chatBotMessage)\r\n    removeLoader(chatBotMessage, this.loader, this.quesReply[targetId], 3000)\r\n\r\n\r\n    this.resetHeight()\r\n  }\r\n\r\n  chatEventsHandler() {\r\n    this.submitInput.addEventListener('click', (e) => {\r\n      const userQuestion = this.input.value\r\n\r\n      if (userQuestion.length < 4) return\r\n\r\n      const chatUserMessage = createMessageElement('user')\r\n      e.preventDefault()\r\n      const userMessage = userQuestion\r\n      this.input.value = ''\r\n      chatUserMessage.innerHTML = userMessage\r\n      this.chatWindow.appendChild(chatUserMessage)\r\n      this.botAnswers(userMessage);\r\n    })\r\n\r\n    this.chatBtn.addEventListener('click', () => {\r\n      this.chatContainer.classList.toggle('active')\r\n    })\r\n\r\n    window.addEventListener('mouseup', (e) => {\r\n      if (e.target === body) {\r\n        this.chatContainer.classList.remove('active')\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default Chatbot\r\n\r\nconst chat = new Chatbot(body)\r\nchat.init()\r\n"]}